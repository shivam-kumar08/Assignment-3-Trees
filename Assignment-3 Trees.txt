class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self, root):
        self.root = TreeNode(root)

    # 1. Implement Binary tree
    def insert(self, value):
        return self._insert_recursive(self.root, value)

    def _insert_recursive(self, current_node, value):
        if current_node is None:
            return TreeNode(value)
        if value < current_node.value:
            current_node.left = self._insert_recursive(current_node.left, value)
        elif value > current_node.value:
            current_node.right = self._insert_recursive(current_node.right, value)
        return current_node

    # 2. Find height of a given tree
    def height(self):
        return self._height_recursive(self.root)

    def _height_recursive(self, node):
        if node is None:
            return 0
        left_height = self._height_recursive(node.left)
        right_height = self._height_recursive(node.right)
        return max(left_height, right_height) + 1

    # 3. Pre-order, Post-order, In-order traversal
    def preorder_traversal(self):
        result = []
        self._preorder_recursive(self.root, result)
        return result

    def _preorder_recursive(self, node, result):
        if node:
            result.append(node.value)
            self._preorder_recursive(node.left, result)
            self._preorder_recursive(node.right, result)

    def inorder_traversal(self):
        result = []
        self._inorder_recursive(self.root, result)
        return result

    def _inorder_recursive(self, node, result):
        if node:
            self._inorder_recursive(node.left, result)
            result.append(node.value)
            self._inorder_recursive(node.right, result)

    def postorder_traversal(self):
        result = []
        self._postorder_recursive(self.root, result)
        return result

    def _postorder_recursive(self, node, result):
        if node:
            self._postorder_recursive(node.left, result)
            self._postorder_recursive(node.right, result)
            result.append(node.value)

    # 4. Function to print all the leaves in a given binary tree
    def print_leaves(self):
        leaves = []
        self._print_leaves_recursive(self.root, leaves)
        return leaves

    def _print_leaves_recursive(self, node, leaves):
        if node is None:
            return
        if node.left is None and node.right is None:
            leaves.append(node.value)
        self._print_leaves_recursive(node.left, leaves)
        self._print_leaves_recursive(node.right, leaves)

    # 5. Implement BFS (Breath First Search) and DFS (Depth First Search)
    def bfs(self):
        result = []
        if not self.root:
            return result
        queue = [self.root]
        while queue:
            node = queue.pop(0)
            result.append(node.value)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        return result

    def dfs(self):
        result = []
        self._dfs_recursive(self.root, result)
        return result

    def _dfs_recursive(self, node, result):
        if node:
            result.append(node.value)
            self._dfs_recursive(node.left, result)
            self._dfs_recursive(node.right, result)

    # 6. Find sum of all left leaves in a given Binary Tree
    def sum_of_left_leaves(self):
        return self._sum_of_left_leaves_recursive(self.root)

    def _sum_of_left_leaves_recursive(self, node):
        if node is None:
            return 0
        left_sum = 0
        if node.left and node.left.left is None and node.left.right is None:
            left_sum += node.left.value
        left_sum += self._sum_of_left_leaves_recursive(node.left)
        left_sum += self._sum_of_left_leaves_recursive(node.right)
        return left_sum

    # 7. Find sum of all nodes of the given perfect binary tree
    def sum_of_all_nodes(self):
        return self._sum_of_all_nodes_recursive(self.root)

    def _sum_of_all_nodes_recursive(self, node):
        if node is None:
            return 0
        return node.value + self._sum_of_all_nodes_recursive(node.left) + self._sum_of_all_nodes_recursive(node.right)

    # 8. Count subtrees that sum up to a given value x in a binary tree
    def count_subtrees_with_sum(self, x):
        count = [0]
        self._count_subtrees_recursive(self.root, x, count)
        return count[0]

    def _count_subtrees_recursive(self, node, x, count):
        if node is None:
            return 0
        left_sum = self._count_subtrees_recursive(node.left, x, count)
        right_sum = self._count_subtrees_recursive(node.right, x, count)
        total_sum = left_sum + right_sum + node.value
        if total_sum == x:
            count[0] += 1
        return total_sum

    # 9. Find maximum level sum in Binary Tree
    def max_level_sum(self):
        if not self.root:
            return 0
        max_sum = float('-inf')
        level_sum = 0
        queue = [self.root]
        while queue:
            level_size = len(queue)
            level_sum = sum(node.value for node in queue)
            max_sum = max(max_sum, level_sum)
            for i in range(level_size):
                node = queue.pop(0)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return max_sum

    # 10. Print the nodes at odd levels of a tree
    def print_odd_level_nodes(self):
        result = []
        self._print_odd_level_nodes_recursive(self.root, result, 1)
        return result

    def _print_odd_level_nodes_recursive(self, node, result, level):
        if node is None:
            return
        if level % 2 == 1:
            result.append(node.value)
        self._print_odd_level_nodes_recursive(node.left, result, level + 1)
        self._print_odd_level_nodes_recursive(node.right, result, level + 1)

# Example usage:
if __name__ == "__main__":
    tree = BinaryTree(10)
    tree.insert(5)
    tree.insert(15)
    tree.insert(3)
    tree.insert(7)
    tree.insert(12)
    tree.insert(18)

    print("Binary Tree:")
    print(tree.bfs())

    print("Height of Tree:", tree.height())

    print("Preorder Traversal:", tree.preorder_traversal())
    print("Inorder Traversal:", tree.inorder_traversal())
    print("Postorder Traversal:", tree.postorder_traversal())

    print("Leaves of Tree:", tree.print_leaves())

    print("BFS Traversal:", tree.bfs())
    print("DFS Traversal:", tree.d
